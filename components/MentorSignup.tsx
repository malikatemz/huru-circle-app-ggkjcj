
import React, { useState } from 'react';
import { View, Text, ScrollView, StyleSheet, TextInput, Alert } from 'react-native';
import { colors, commonStyles } from '../styles/commonStyles';
import Button from './Button';
import { MentorApplication } from '../types';

interface MentorSignupProps {
  onSubmitApplication: (application: Omit<MentorApplication, 'id' | 'submittedAt' | 'status'>) => void;
  onBack: () => void;
}

const MentorSignup: React.FC<MentorSignupProps> = ({ onSubmitApplication, onBack }) => {
  const [formData, setFormData] = useState({
    realName: '',
    email: '',
    phone: '',
    experience: '',
    motivation: '',
    references: ['', '', ''],
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.realName.trim()) {
      newErrors.realName = 'Full name is required';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email';
    }

    if (!formData.phone.trim()) {
      newErrors.phone = 'Phone number is required';
    }

    if (!formData.experience.trim()) {
      newErrors.experience = 'Experience description is required';
    }

    if (!formData.motivation.trim()) {
      newErrors.motivation = 'Motivation statement is required';
    }

    if (formData.references.filter(ref => ref.trim()).length < 2) {
      newErrors.references = 'At least 2 references are required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (validateForm()) {
      const application = {
        applicantId: 'temp-id', // This would be generated by the backend
        ...formData,
        references: formData.references.filter(ref => ref.trim()),
      };

      onSubmitApplication(application);
      Alert.alert(
        'Application Submitted',
        'Thank you for your interest in becoming a mentor! We will review your application and get back to you within 3-5 business days.',
        [{ text: 'OK', onPress: onBack }]
      );
    }
  };

  const updateReference = (index: number, value: string) => {
    const newReferences = [...formData.references];
    newReferences[index] = value;
    setFormData({ ...formData, references: newReferences });
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Become a HURU Mentor</Text>
        <Text style={styles.subtitle}>
          Join our community of mentors and help guide young people on their journey of growth and discovery.
        </Text>
      </View>

      <View style={styles.form}>
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Personal Information</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Full Name *</Text>
            <TextInput
              style={[styles.input, errors.realName && styles.inputError]}
              value={formData.realName}
              onChangeText={(text) => setFormData({ ...formData, realName: text })}
              placeholder="Enter your full name"
              placeholderTextColor={colors.textLight}
            />
            {errors.realName && <Text style={styles.errorText}>{errors.realName}</Text>}
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Email Address *</Text>
            <TextInput
              style={[styles.input, errors.email && styles.inputError]}
              value={formData.email}
              onChangeText={(text) => setFormData({ ...formData, email: text })}
              placeholder="Enter your email address"
              placeholderTextColor={colors.textLight}
              keyboardType="email-address"
              autoCapitalize="none"
            />
            {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Phone Number *</Text>
            <TextInput
              style={[styles.input, errors.phone && styles.inputError]}
              value={formData.phone}
              onChangeText={(text) => setFormData({ ...formData, phone: text })}
              placeholder="Enter your phone number"
              placeholderTextColor={colors.textLight}
              keyboardType="phone-pad"
            />
            {errors.phone && <Text style={styles.errorText}>{errors.phone}</Text>}
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Experience & Motivation</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Relevant Experience *</Text>
            <Text style={styles.helperText}>
              Tell us about your experience working with young people, counseling, teaching, or any relevant background.
            </Text>
            <TextInput
              style={[styles.textArea, errors.experience && styles.inputError]}
              value={formData.experience}
              onChangeText={(text) => setFormData({ ...formData, experience: text })}
              placeholder="Describe your relevant experience..."
              placeholderTextColor={colors.textLight}
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
            {errors.experience && <Text style={styles.errorText}>{errors.experience}</Text>}
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Why do you want to be a mentor? *</Text>
            <Text style={styles.helperText}>
              Share your motivation for wanting to mentor young people in the HURU Circle community.
            </Text>
            <TextInput
              style={[styles.textArea, errors.motivation && styles.inputError]}
              value={formData.motivation}
              onChangeText={(text) => setFormData({ ...formData, motivation: text })}
              placeholder="Share your motivation..."
              placeholderTextColor={colors.textLight}
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
            {errors.motivation && <Text style={styles.errorText}>{errors.motivation}</Text>}
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>References</Text>
          <Text style={styles.helperText}>
            Please provide at least 2 references who can speak to your character and suitability as a mentor.
          </Text>
          
          {formData.references.map((reference, index) => (
            <View key={index} style={styles.inputGroup}>
              <Text style={styles.label}>Reference {index + 1} {index < 2 ? '*' : ''}</Text>
              <TextInput
                style={styles.input}
                value={reference}
                onChangeText={(text) => updateReference(index, text)}
                placeholder="Name, relationship, and contact information"
                placeholderTextColor={colors.textLight}
              />
            </View>
          ))}
          {errors.references && <Text style={styles.errorText}>{errors.references}</Text>}
        </View>

        <View style={styles.disclaimer}>
          <Text style={styles.disclaimerText}>
            By submitting this application, you agree to undergo a background check and commit to upholding the HURU Circle community guidelines and values.
          </Text>
        </View>

        <View style={styles.buttonContainer}>
          <Button
            text="Submit Application"
            onPress={handleSubmit}
            variant="primary"
            style={styles.submitButton}
          />
          <Button
            text="Back"
            onPress={onBack}
            variant="outline"
            style={styles.backButton}
          />
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    padding: 20,
    backgroundColor: colors.primary,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.white,
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: colors.white,
    opacity: 0.9,
    lineHeight: 22,
  },
  form: {
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    color: colors.text,
    marginBottom: 6,
  },
  helperText: {
    fontSize: 12,
    color: colors.textLight,
    marginBottom: 8,
    lineHeight: 16,
  },
  input: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: colors.text,
    backgroundColor: colors.white,
  },
  textArea: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: colors.text,
    backgroundColor: colors.white,
    minHeight: 100,
  },
  inputError: {
    borderColor: colors.error,
  },
  errorText: {
    fontSize: 12,
    color: colors.error,
    marginTop: 4,
  },
  disclaimer: {
    backgroundColor: colors.backgroundAlt,
    padding: 16,
    borderRadius: 8,
    marginBottom: 24,
  },
  disclaimerText: {
    fontSize: 12,
    color: colors.textLight,
    lineHeight: 16,
    textAlign: 'center',
  },
  buttonContainer: {
    gap: 12,
  },
  submitButton: {
    marginBottom: 8,
  },
  backButton: {
    marginBottom: 20,
  },
});

export default MentorSignup;
